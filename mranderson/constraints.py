# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/constraints.ipynb (unless otherwise specified).

__all__ = ['uniqueness', 'logger']

# Cell
import logging
logger = logging.getLogger()
import traceback
from neo4j.exceptions import ClientError
from mranderson import Query

def uniqueness(label:str, property_name:str, safely=True):
    '''
    Adds a uniqueness constraint on the property property_name on nodes of label
    e.g. uniqueness('Device', 'device_id') --> Device nodes must have a unique 'device_id' property

    safely: If False, throw an exception if the constraint already exists
    '''
    constraint = "CREATE CONSTRAINT ON (node:{label}) ASSERT node.{property_name} IS UNIQUE".format(
            label=label, property_name=property_name)
    q = Query()
    q.add(constraint)
    try:
        resp = q.create()
    except ClientError as e:
        logger.info("Constraint {} already exists".format(constraint))
        if not safely:
            raise e